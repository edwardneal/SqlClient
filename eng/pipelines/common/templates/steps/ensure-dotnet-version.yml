#################################################################################
# Licensed to the .NET Foundation under one or more agreements.                 #
# The .NET Foundation licenses this file to you under the MIT license.          #
# See the LICENSE file in the project root for more information.                #
#################################################################################

# Installs dotnet sdk/runtime using UseDotNet on non-windows agents, but uses a custom ps script
# for installation on Windows.
# 
# Reason for not using UseDotNet task:
#   [BUG]: UseDotNet task installs x86 build on Windows arm64
#   https://github.com/microsoft/azure-pipelines-tasks/issues/20300

parameters:
    - # Directory where dotnet binaries should be installed. If not specified, defaults to the
      # agent's tools directory.
      name: installDir
      type: string
      default: ''

    - # Whether to install the full SDK or the "dotnet" runtime
      name: packageType
      type: string
      values:
          - runtime
          - sdk
    
    - # Whether to enable preview versions of dotnet
      name: usePreview
      type: boolean
      default: false
      
    - # Version to install - supports full major.minor.patch, but can be shortened to major.minor
      # to get the latest within a given channel. Do not append .x to the end (as per UseDotNet),
      # it is not supported by dotnet-install script, and we will add it if we use UseDotNet task.
      name: version
      type: string
      
    - # Specifies the architecture to install, only applies on Windows agents. If not provided,
      # defaults to the same architecture as the agent.
      name: windowsArchitecture
      type: string
      default: '<auto>'
      values:
          - '<auto>'
          - 'x86'
          - 'x64'
          - 'arm64'

steps:
    # Note: as much as I'd love to use template expressions here, I can't because ${{ }} is
    #     evaluated at compile time, while Agent is not known until runtime.
    - powershell: |-
          # Propagate parameters from pipeline #######################
          $agentToolsDir = '$(Agent.ToolsDirectory)'
          echo "agentToolsDir= $agentToolsDir"
          
          $architecture = '${{ parameters.windowsArchitecture }}'
          echo "architecture= $architecture"
          
          $installDir = '${{ parameters.installDir }}'
          echo "installDir= $installDir"
          
          $packageType = '${{ parameters.packageType }}'
          echo "packageType= $packageType"
          
          $usePreview = '${{ parameters.usePreview }}'
          echo "usePreview= $usePreview"
          
          $version = '${{ parameters.version }}'
          echo "version= $version"
          
          # Install dotnet ###########################################
          Invoke-WebRequest -Uri "https://builds.dotnet.microsoft.com/dotnet/scripts/v1/dotnet-install.ps1" -OutFile "dotnet-install.ps1"
          
          $installDir = If ($installDir) { $installDir } Else { $agentToolsDir } 
          $installParams = @{
              Architecture = $architecture
              Channel =      $version
              InstallDir =   $installDir
              Quality =      If ($usePreview) { "GA" } Else { "preview" }
          }
          
          if ($packageType -eq 'runtime') {
              $installParams.add('Runtime', 'dotnet')
          }
          
          & ./dotnet-install.ps1 @installParams
          Remove-Item dotnet-install.ps1 -ErrorAction:Ignore
          
          # Propagate values back out to pipeline ####################
          Write-Host "##vso[task.setvariable variable=DOTNET_ROOT]${installDir}"
          Write-Host "##vso[task.prependpath]${installDir}"
      displayName: 'Install dotnet ${{ parameters.version }} ${{ parameters.packageType }} for Windows ${{ parameters.windowsArchitecture }}'
      condition: eq(variables['Agent.OS'], 'Windows_NT')

    - task: UseDotNet@2
      displayName: 'Install dotnet ${{ parameters.version }} ${{ parameters.packageType }}'
      inputs:
          ${{ if ne(parameters.installDir, '') }}:
              installationPath: '${{ parameters.installDir }}'
          ${{ else }}:
              installationPath: '$(Agent.ToolsDirectory)'
          packageType: '${{ parameters.packageType }}'
          version: '${{ parameters.version }}.x'

          includePreviewVersions: '${{ parameters.usePreview }}'
      condition: ne(variables['Agent.OS'], 'Windows_NT')
