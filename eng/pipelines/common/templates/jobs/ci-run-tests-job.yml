#################################################################################
# Licensed to the .NET Foundation under one or more agreements.                 #
# The .NET Foundation licenses this file to you under the MIT license.          #
# See the LICENSE file in the project root for more information.                #
#################################################################################
parameters:
  - name: debug
    type: boolean
    default: false

  - name: poolName
    type: string

  - name: hostedPool
    type: boolean
    default: false

  - name: image
    type: string

  - name: jobDisplayName
    type: string

  - name: usemanagedSNI
    type: boolean
    default: false

  - name: configProperties
    type: object
    default: {} # - key: 'value'

  - name: prebuildSteps
    type: stepList
    default: []

  - name: artifactName
    type: string
    default: Artifacts

  - name: targetFramework
    type: string

  - name: netcoreVersionTestUtils
    type: string

  - name: enableX86Test
    type: boolean
    default: false

  - name: enableX64Test
    type: boolean
    default: true

  - name: testSet
    type: string
  
  - name: publishTestResults
    type: boolean
    default: false
  
  - name: configSqlFor
    type: string # local, azure, or enclave
    default: local
  
  - name: operatingSystem
    type: string
    default: ''
  
  - name: buildType
    displayName: 'Build Type'
    default: Project
    values:
      - Project
      - Package

jobs:
- job: ${{ format('{0}', coalesce(parameters.jobDisplayName, parameters.image, 'unknown_image')) }}

  pool:
    name: '${{ parameters.poolName }}'
    ${{ if eq(parameters.hostedPool, true) }}:
      vmImage: ${{ parameters.image }}
    ${{ else }}:
      demands:
      - imageOverride -equals ${{ parameters.image }}

  variables:
    - name: dotnetx86RootPath
      value: '$(dotnetx86Path)'

  steps:
  - ${{ if ne(parameters.prebuildSteps, '') }}:
    - ${{ parameters.prebuildSteps }} # extra steps to run before the build like downloading sni and the required configuration

  - powershell: |
      $guid = [guid]::NewGuid().ToString()
      Write-Host "##vso[task.setvariable variable=password;issecret=true]$guid"
    displayName: 'Generate Password'

  - powershell: |
      Write-Host "Password: $(password)" # prints *** to logs when set

      $variableValue = "$(password)"
      if (-not [string]::IsNullOrEmpty($variableValue)) {
          Write-Output "The password exists with a value."
      } else {
          Write-Output "The password does not exist or is empty."
      }
    displayName: 'Verify Password'

  - ${{ if ne(parameters.configProperties, '{}') }}:
    - template: ../steps/update-config-file-step.yml@self # update config.json file
      parameters:
        debug: ${{ parameters.debug }}
        UseManagedSNIOnWindows: ${{ parameters.usemanagedSNI }}
        ${{ if parameters.configProperties.TCPConnectionString }}:
          TCPConnectionString: ${{ parameters.configProperties.TCPConnectionString }}
        ${{ if parameters.configProperties.NPConnectionString }}:
          NPConnectionString: ${{ parameters.configProperties.NPConnectionString }}
        ${{ if parameters.configProperties.AADAuthorityURL }}:
          AADAuthorityURL: ${{ parameters.configProperties.AADAuthorityURL }}
        ${{ if parameters.configProperties.TCPConnectionStringHGSVBS }}:
          TCPConnectionStringHGSVBS: ${{ parameters.configProperties.TCPConnectionStringHGSVBS }}
        ${{ if parameters.configProperties.TCPConnectionStringNoneVBS }}:
          TCPConnectionStringNoneVBS: ${{ parameters.configProperties.TCPConnectionStringNoneVBS }}
        ${{ if parameters.configProperties.TCPConnectionStringAASSGX }}:
          TCPConnectionStringAASSGX: ${{ parameters.configProperties.TCPConnectionStringAASSGX }}
        ${{ if parameters.configProperties.EnclaveEnabled }}:
          EnclaveEnabled: ${{ eq(parameters.configProperties.EnclaveEnabled, 'true') }}
        ${{ if parameters.configProperties.TracingEnabled }}:
          TracingEnabled: ${{ eq(parameters.configProperties.TracingEnabled, 'true') }}
        ${{ if parameters.configProperties.AADPasswordConnectionString }}:
          AADPasswordConnectionString: ${{ parameters.configProperties.AADPasswordConnectionString }}
        ${{ if parameters.configProperties.AADServicePrincipalId }}:
          AADServicePrincipalId: ${{ parameters.configProperties.AADServicePrincipalId }}
        ${{ if parameters.configProperties.AADServicePrincipalSecret }}:
          AADServicePrincipalSecret: ${{ parameters.configProperties.AADServicePrincipalSecret }}
        ${{ if parameters.configProperties.AzureKeyVaultUrl }}:
          AzureKeyVaultUrl: ${{ parameters.configProperties.AzureKeyVaultUrl }}
        ${{ if parameters.configProperties.AzureKeyVaultTenantId }}:
          AzureKeyVaultTenantId: ${{ parameters.configProperties.AzureKeyVaultTenantId }}
        ${{ if parameters.configProperties.UserManagedIdentityClientId }}:
          UserManagedIdentityClientId: ${{ parameters.configProperties.UserManagedIdentityClientId }}
        ${{ if parameters.configProperties.FileStreamDirectory }}:
          FileStreamDirectory: ${{ parameters.configProperties.FileStreamDirectory }}
        ${{ if parameters.configProperties.LocalDbAppName }}:
          LocalDbAppName: ${{ parameters.configProperties.LocalDbAppName }}
        ${{ if parameters.configProperties.LocalDbSharedInstanceName }}:
          LocalDbSharedInstanceName: ${{ parameters.configProperties.LocalDbSharedInstanceName }}
        ${{ if parameters.configProperties.AliasName }}:
          AliasName: ${{ parameters.configProperties.AliasName }}
        ${{ if parameters.configProperties.SupportsIntegratedSecurity }}:
          SupportsIntegratedSecurity: ${{ eq(parameters.configProperties.SupportsIntegratedSecurity, 'true') }}
        ${{ if parameters.configProperties.SupportsFileStream }}:
          SupportsFileStream: ${{ eq(parameters.configProperties.SupportsFileStream, 'true') }}
        ${{ if parameters.configProperties.DNSCachingConnString }}:
          DNSCachingConnString: ${{ parameters.configProperties.DNSCachingConnString }}
        ${{ if parameters.configProperties.DNSCachingServerCR }}:
          DNSCachingServerCR: ${{ parameters.configProperties.DNSCachingServerCR }}
        ${{ if parameters.configProperties.DNSCachingServerTR }}:
          DNSCachingServerTR: ${{ parameters.configProperties.DNSCachingServerTR }}
        ${{ if parameters.configProperties.EnclaveAzureDatabaseConnString }}:
          EnclaveAzureDatabaseConnString: ${{ parameters.configProperties.EnclaveAzureDatabaseConnString }}
        ${{ if parameters.configProperties.IsDNSCachingSupportedCR }}:
          IsDNSCachingSupportedCR: ${{ eq(parameters.configProperties.IsDNSCachingSupportedCR, 'true') }}
        ${{ if parameters.configProperties.IsDNSCachingSupportedTR }}:
          IsDNSCachingSupportedTR: ${{ eq(parameters.configProperties.IsDNSCachingSupportedTR, 'true') }}
        ${{ if parameters.configProperties.IsAzureSynapse }}:
          IsAzureSynapse: ${{ eq(parameters.configProperties.IsAzureSynapse, 'true') }}
        ${{ if parameters.configProperties.ManagedIdentitySupported }}:
          ManagedIdentitySupported: ${{ eq(parameters.configProperties.ManagedIdentitySupported, 'true') }}

    - ${{ if and(eq(parameters.configSqlFor, 'azure'), eq(parameters.operatingSystem, 'Windows')) }}:
      - powershell: |
          # Try to start the SQL Browser service, if it exists
          $svc_name = "SQLBrowser"
          if ((Get-Service -Name "$svc_name" -ErrorAction SilentlyContinue) -ne $null) {
              Get-Service $svc_name | Select-Object -Property Name, StartType, Status
              Set-Service -StartupType Automatic $svc_name
              net start $svc_name
              Get-Service $svc_name | Select-Object -Property Name, StartType, Status
          }
          
        displayName: 'Start Sql Browser'
        condition: eq(variables['Agent.OS'], 'Windows_NT')
    - ${{ elseif eq(parameters.configSqlFor, 'local') }}:
      - template: ../steps/configure-sql-server-step.yml@self # configure SQL Server
        parameters:
          operatingSystem: ${{ parameters.operatingSystem }}
          netcoreVersionTestUtils: ${{ parameters.netcoreVersionTestUtils }}
          ${{ if parameters.configProperties.instanceName }}:
            instanceName: ${{ parameters.configProperties.instanceName }}
          ${{ if parameters.configProperties.user }}:
            user: ${{ parameters.configProperties.user }}
          ${{ if parameters.configProperties.saUser }}:
            saUser: ${{ parameters.configProperties.saUser }}
          ${{ if parameters.configProperties.SQLRootPath }}:
            SQLRootPath: ${{ parameters.configProperties.SQLRootPath }}
          ${{ if parameters.configProperties.x64AliasRegistryPath }}:
            x64AliasRegistryPath: ${{ parameters.configProperties.x64AliasRegistryPath }}
          ${{ if parameters.configProperties.x86AliasRegistryPath }}:
            x86AliasRegistryPath: ${{ parameters.configProperties.x86AliasRegistryPath }}
          ${{ if parameters.configProperties.SQLAliasName }}:
            SQLAliasName: ${{ parameters.configProperties.SQLAliasName }}
          ${{ if parameters.configProperties.SQLAliasPort }}:
            SQLAliasPort: ${{ parameters.configProperties.SQLAliasPort }}
          ${{ if parameters.configProperties.databaseName }}:
            databaseName: ${{ parameters.configProperties.databaseName }}
          ${{ if parameters.configProperties.enableLocalDB }}:
            enableLocalDB: ${{ parameters.configProperties.enableLocalDB }}
          ${{ if parameters.configProperties.localDbAppName }}:
            LocalDbAppName: ${{ parameters.configProperties.localDbAppName }}
          ${{ if parameters.configProperties.localDbSharedInstanceName }}:
            LocalDbSharedInstanceName: ${{ parameters.configProperties.localDbSharedInstanceName }}
          ${{ if parameters.configProperties.FileStreamDirectory }}:
            fileStreamDirectory: ${{ parameters.configProperties.FileStreamDirectory }}

    - template: ../steps/build-all-tests-step.yml@self # build tests
      parameters:
        targetFramework: ${{ parameters.targetFramework }}
        referenceType: ${{ parameters.buildType }}
        testSet: ${{ parameters.testSet }}
        ${{ if ne(parameters.operatingSystem, 'Windows') }}:
          OSGroup: Unix

  - ${{ if eq(parameters.enableX64Test, true) }}: # run native tests
    - template: ../steps/run-all-tests-step.yml@self # run tests
      parameters:
        debug: ${{ parameters.debug }}
        targetFramework: ${{ parameters.targetFramework }}
        referenceType: ${{ parameters.buildType }}
        testSet: ${{ parameters.testSet }}
        operatingSystem: ${{ parameters.operatingSystem }}

  - ${{ if and(eq(parameters.enableX86Test, true), eq(parameters.operatingSystem, 'Windows')) }}:
    # Set up for x86 tests by manually installing dotnet for x86 to an alternative location. This
    # is only used to execute the test runtime (framework to test is specified in build params), so
    # it should be acceptable to just install a specific version in all cases.
    # @TODO: This setup is very confusing. Ideally we should just be utilizing the dotnet installation
    #    earlier in the job. There has to be a cleaner way of doing this.
    #    As it stands now, we install dotnet LTS if we're running netfx tests, and the appropriate netX
    #    version if we're running netcore tests. Technically LTS is not supported by the UseDotNet task
    #    but we know we're using install-dotnet since we're on windows (for now ... this will not work
    #    forever and needs a serious rethinking).
    - ${{ if ne(variables['dotnetx86RootPath'], '') }}:
      - ${{ if startswith(parameters.targetFramework, 'net4')}}:
        - template: ../steps/ensure-dotnet-version.yml
          parameters:
            installDir: "$(dotnetx86RootPath)"
            packageType: "sdk"
            usePreview: "false"
            version: "LTS"
            windowsArchitecture: "x86"
      - ${{ else }}:
        - script: |
            set FrameworkVersion=${{ parameters.targetFramework }}
            echo %FrameworkVersion%
            set TrimmedFrameworkVersion=%FrameworkVersion:~3%
            echo %TrimmedFrameworkVersion%
            echo ##vso[task.setvariable variable=netVersionX86]%TrimmedFrameworkVersion%
          displayName: "Trim dotnet version"
        - template: ../steps/ensure-dotnet-version.yml
          parameters:
            installDir: "$(dotnetx86RootPath)"
            packageType: "sdk"
            usePreview: "false"
            version: $(netVersionX86)

    - template: ../steps/run-all-tests-step.yml@self
      parameters:
        debug: ${{ parameters.debug }}
        targetFramework: ${{ parameters.targetFramework }}
        referenceType: ${{ parameters.buildType }}
        testSet: ${{ parameters.testSet }}
        msbuildArchitecture: x86
        dotnetx86RootPath: $(dotnetx86RootPath)
        operatingSystem: ${{ parameters.operatingSystem }}

  - ${{ if and(eq(parameters.publishTestResults, true), eq(parameters.buildType, 'Project')) }}: # publish test results if build type is project
    - template: ../steps/publish-test-results-step.yml@self
      parameters:
        debug: ${{ parameters.debug }}
        targetFramework: ${{ parameters.targetFramework }}
        operatingSystem: ${{ parameters.operatingSystem }}
